#!/usr/bin/env ruby

# A script to automate the creation of multiple different types of trees.

# As this is just a wrapper script around many other programs, several
# programs need to be installed, and in the PATH:
# PhyML - sudo ln -s /home/ben/bioinfo/phyml_3.0.1/phyml_3.0.1_linux32 /usr/bin/phyml
# phylip - sudo apt-get install phylip

require 'optparse'

require 'rubygems'
require 'peach'
require 'tempfile'

USAGE = "Usage: trees [-r <repetitions>] <fasta_multiple_sequence_alignment>"
options = {
  :repetitions => 1000,
  :ml_repetitions => 1000,
}
OptionParser.new do |opts|
  opts.banner = USAGE

  opts.on("-r", "--repetitions REPETITIONS", Integer, "Number of bootstrap repetitions to do for NJ and parsimony methods") do |v|
    options[:repetitions] = v
  end
  
  opts.on("-m", "--maximum-likelyhood-repetitions REPETITIONS", Integer, "Number of ML repetitions") do |v|
    options[:ml_repetitions] = v
  end

  opts.on('-p', "--pbs", "Use PBS style scripts for each tree making method. Most useful for HPC computers") do |v|
    options[:pbs] = v
  end

  # Capital letter switch input indicate arguments that are directly passed to the tree making programs
  opts.on('-M', "--maximum-likelyhood-parameters ARGUMENTS", "Parameters to pass to the maximum likelyhood program as is (Currently phyml)") do |v|
    options[:likelyhood_parameters] = v
  end
end.parse!

if ARGV.length != 1
  $stderr.puts USAGE
  exit
end
fasta_file_input = ARGV[0]

distance_options = ''
distance_options = "#{distance_options} -r #{options[:repetitions]}" if options[:repetitions]
parsimony_options = distance_options
parsimony_options = distance_options
commands = [
  "trees_distance #{distance_options} #{fasta_file_input} >trees_distance.out",
  "trees_parsimony #{parsimony_options} #{fasta_file_input} >trees_parsimony.out",
  "trees_ml -d trees_ml_likelyhood #{fasta_file_input} >trees_ml_likelyhood.out",
  "trees_ml -r #{options[:ml_repetitions]} -d trees_ml_bootstrap #{fasta_file_input} >trees_ml_bootstrap.out",
]

# Add '_hpc' to the end of the first argument if requested
if options[:pbs]
  commands.collect! do |cmd|
    # qsub annoyingly can't deal with arguments for the 
    # program being run - it keeps them for itself. So, here I write
    # a new pbs script
    Tempfile.open('trees_pbs') do |tempfile|
      splits = cmd.split(' ', 2)
      input = File.open(File.join(File.dirname(__FILE__),"#{splits[0]}_hpc")).read
      tempfile.puts input
      tempfile.puts cmd
      tempfile.flush
      
      system("qsub #{tempfile.path}")
    end
  end
else
  commands.peach do |command|
    system(command) or raise Exception, $?
  end
end




