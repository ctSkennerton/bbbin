#!/usr/bin/env ruby

require 'tempfile'
require 'optparse'

# Parse cmd line options
USAGE = "Usage: trees_distance [-r <repetitions>] [-d <directory>] <fasta_multiple_sequence_alignment>"
options = {
  :repetitions => 1000,
  :directory => 'trees_distance'
}
OptionParser.new do |opts|
  opts.banner = USAGE
  
  opts.on("-r", "--repetitions [REPETITIONS]", Integer, "Number of bootstrap repetitions to do") do |v|
    options[:repetitions] = v
  end
  
  opts.on('-d', '--directory DIRECTORY', String, "Directory of the working and output files") do |v|
    options[:directory] = v
  end

  opts.on("-m", "--manual-names MANUAL_NAMES_FILENAME", "Read a hash of regular expression => wanted names for a node in the final tree") do |v|
    options[:manual_names_file] = v
  end
end.parse!
p options

if ARGV.length != 1
  $stderr.puts USAGE
  exit
end
fasta_file_input = ARGV[0]

system("mkdir #{options[:directory]}") or raise
system("sreformat phylip #{fasta_file_input} >#{options[:directory]}/ununiqued.phylip")
Dir.chdir(options[:directory])
system('uniqify_phylip.rb <ununiqued.phylip >uniqued.phylip')

# Do the boostrapping, if more than 1 repetition is asked for
system('ln -s uniqued.phylip infile')
if options[:repetitions] > 1
  Tempfile.open('trees_distance.seqboot.params') do |tempfile|
    tempfile.puts 'R'
    tempfile.puts options[:repetitions] #1000 by default
    tempfile.puts 'Y'
    tempfile.puts '73'
    tempfile.close #required. Maybe because it doesn't flush otherwise?
  
    system("phylip seqboot <#{tempfile.path}") or raise Exception, $?.inspect
  end
  system('mv outfile seqboot.outfile') or raise Exception, $?.inspect
  system('rm infile') or raise Exception, $?.inspect
  system('ln -s seqboot.outfile infile')
end

# create distance tree
puts "Running protdist"

Tempfile.open('trees_distance.protdist.params') do |tempfile|
  if options[:repetitions].to_i > 1
    tempfile.puts 'M'
    tempfile.puts 'D'
    tempfile.puts options[:repetitions] #1000 by default
  end
  tempfile.puts 'Y'
  tempfile.close #required. Maybe because it doesn't flush otherwise?
  
  system("phylip protdist <#{tempfile.path}")
end
system('mv outfile protdist.outfile')
system('rm infile')

# do a bionj tree
Tempfile.open('trees_distance.bionj.params') do |tempfile|
  tempfile.puts 'protdist.outfile'
  tempfile.puts 'bionj.outfile'
  tempfile.close #required. Maybe because it doesn't flush otherwise?
  
  system("bionj <#{tempfile.path}") or raise Exception, $?
end

# Make the consensus tree, if bootstrapping is being done
final_tree_name = 'consense.outtree'
if options[:repetitions] > 1
  system('ln -s bionj.outfile intree')
  Tempfile.open('trees_distance.consense.params') do |tempfile|
    tempfile.puts 'y'
    tempfile.close
    system("phylip consense <#{tempfile.path}")
  end
  system('mv outfile consense.outfile')
  system('mv outtree consense.outtree')
  system('rm intree')
else
  # no bootstrapping - just take the bionj tree
  final_tree_name = 'bionj.outfile'
end

#convert the names on the tree back to sensible land
Dir.chdir('..')
command_options = options[:manual_names_file].nil? ? nil : "-m #{options[:manual_names_file]}"
command_options += " #{fasta_file_input} #{options[:directory]}/uniqued.phylip #{options[:directory]}/#{final_tree_name} >#{options[:directory]}/distance.tree"
system("ununiqify_standard_tree.rb #{command_options}")
